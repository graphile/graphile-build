// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Middleware defaults handles the introspection query 1`] = `
type Bar implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  fooId: Int!
  label: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single \`Foo\` that is related to this \`Bar\`."""
  fooByFooId: Foo
}

"""
A condition to be used against \`Bar\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BarCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`fooId\` field."""
  fooId: Int

  """Checks for equality with the object’s \`label\` field."""
  label: String

  """Checks for equality with the object’s \`createdAt\` field."""
  createdAt: Datetime

  """Checks for equality with the object’s \`updatedAt\` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting \`Bar\`"""
input BarInput {
  id: Int
  fooId: Int!
  label: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a \`Bar\`. Fields that are set will be updated."""
input BarPatch {
  id: Int
  fooId: Int
  label: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of \`Bar\` values."""
type BarsConnection {
  """A list of \`Bar\` objects."""
  nodes: [Bar]!

  """
  A list of edges which contains the \`Bar\` and cursor to aid in pagination.
  """
  edges: [BarsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Bar\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Bar\` edge in the connection."""
type BarsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Bar\` at the end of the edge."""
  node: Bar
}

"""Methods to use when ordering \`Bar\`."""
enum BarsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FOO_ID_ASC
  FOO_ID_DESC
  LABEL_ASC
  LABEL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create \`Bar\` mutation."""
input CreateBarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Bar\` to be created by this mutation."""
  bar: BarInput!
}

"""The output of our create \`Bar\` mutation."""
type CreateBarPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Bar\` that was created by this mutation."""
  bar: Bar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single \`Foo\` that is related to this \`Bar\`."""
  fooByFooId: Foo

  """An edge for our \`Bar\`. May be used by Relay 1."""
  barEdge(
    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BarsEdge
}

"""All input for the create \`Foo\` mutation."""
input CreateFooInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Foo\` to be created by this mutation."""
  foo: FooInput!
}

"""The output of our create \`Foo\` mutation."""
type CreateFooPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Foo\` that was created by this mutation."""
  foo: Foo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our \`Foo\`. May be used by Relay 1."""
  fooEdge(
    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteBarById\` mutation."""
input DeleteBarByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteBar\` mutation."""
input DeleteBarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Bar\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Bar\` mutation."""
type DeleteBarPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Bar\` that was deleted by this mutation."""
  bar: Bar
  deletedBarId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single \`Foo\` that is related to this \`Bar\`."""
  fooByFooId: Foo

  """An edge for our \`Bar\`. May be used by Relay 1."""
  barEdge(
    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BarsEdge
}

"""All input for the \`deleteFooById\` mutation."""
input DeleteFooByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteFoo\` mutation."""
input DeleteFooInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Foo\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Foo\` mutation."""
type DeleteFooPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Foo\` that was deleted by this mutation."""
  foo: Foo
  deletedFooId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our \`Foo\`. May be used by Relay 1."""
  fooEdge(
    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosEdge
}

type Foo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of \`Bar\`."""
  barsByFooId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BarCondition
  ): BarsConnection!
}

"""
A condition to be used against \`Foo\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FooCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`createdAt\` field."""
  createdAt: Datetime

  """Checks for equality with the object’s \`updatedAt\` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting \`Foo\`"""
input FooInput {
  id: Int
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a \`Foo\`. Fields that are set will be updated."""
input FooPatch {
  id: Int
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of \`Foo\` values."""
type FoosConnection {
  """A list of \`Foo\` objects."""
  nodes: [Foo]!

  """
  A list of edges which contains the \`Foo\` and cursor to aid in pagination.
  """
  edges: [FoosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Foo\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Foo\` edge in the connection."""
type FoosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Foo\` at the end of the edge."""
  node: Foo
}

"""Methods to use when ordering \`Foo\`."""
enum FoosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Bar\`."""
  createBar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBarInput!
  ): CreateBarPayload

  """Creates a single \`Foo\`."""
  createFoo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFooInput!
  ): CreateFooPayload

  """Updates a single \`Bar\` using its globally unique id and a patch."""
  updateBar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBarInput!
  ): UpdateBarPayload

  """Updates a single \`Bar\` using a unique key and a patch."""
  updateBarById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBarByIdInput!
  ): UpdateBarPayload

  """Updates a single \`Foo\` using its globally unique id and a patch."""
  updateFoo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFooInput!
  ): UpdateFooPayload

  """Updates a single \`Foo\` using a unique key and a patch."""
  updateFooById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFooByIdInput!
  ): UpdateFooPayload

  """Deletes a single \`Bar\` using its globally unique id."""
  deleteBar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBarInput!
  ): DeleteBarPayload

  """Deletes a single \`Bar\` using a unique key."""
  deleteBarById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBarByIdInput!
  ): DeleteBarPayload

  """Deletes a single \`Foo\` using its globally unique id."""
  deleteFoo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFooInput!
  ): DeleteFooPayload

  """Deletes a single \`Foo\` using a unique key."""
  deleteFooById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFooByIdInput!
  ): DeleteFooPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of \`Bar\`."""
  allBars(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BarCondition
  ): BarsConnection

  """Reads and enables pagination through a set of \`Foo\`."""
  allFoos(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FooCondition
  ): FoosConnection
  barById(id: Int!): Bar
  fooById(id: Int!): Foo
  fooOne: Foo

  """Reads and enables pagination through a set of \`Foo\`."""
  oddFoos(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): FoosConnection!
  oddFoosArray: [Foo]
  viewerId: Int

  """Reads a single \`Bar\` using its globally unique \`ID\`."""
  bar(
    """The globally unique \`ID\` to be used in selecting a single \`Bar\`."""
    nodeId: ID!
  ): Bar

  """Reads a single \`Foo\` using its globally unique \`ID\`."""
  foo(
    """The globally unique \`ID\` to be used in selecting a single \`Foo\`."""
    nodeId: ID!
  ): Foo
}

"""All input for the \`updateBarById\` mutation."""
input UpdateBarByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the \`Bar\` being updated.
  """
  barPatch: BarPatch!
  id: Int!
}

"""All input for the \`updateBar\` mutation."""
input UpdateBarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Bar\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Bar\` being updated.
  """
  barPatch: BarPatch!
}

"""The output of our update \`Bar\` mutation."""
type UpdateBarPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Bar\` that was updated by this mutation."""
  bar: Bar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single \`Foo\` that is related to this \`Bar\`."""
  fooByFooId: Foo

  """An edge for our \`Bar\`. May be used by Relay 1."""
  barEdge(
    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BarsEdge
}

"""All input for the \`updateFooById\` mutation."""
input UpdateFooByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the \`Foo\` being updated.
  """
  fooPatch: FooPatch!
  id: Int!
}

"""All input for the \`updateFoo\` mutation."""
input UpdateFooInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Foo\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Foo\` being updated.
  """
  fooPatch: FooPatch!
}

"""The output of our update \`Foo\` mutation."""
type UpdateFooPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Foo\` that was updated by this mutation."""
  foo: Foo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our \`Foo\`. May be used by Relay 1."""
  fooEdge(
    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosEdge
}

`;

exports[`Subscriptions handles the introspection query 1`] = `
type Bar implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  fooId: Int!
  label: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single \`Foo\` that is related to this \`Bar\`."""
  fooByFooId: Foo
}

"""
A condition to be used against \`Bar\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BarCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`fooId\` field."""
  fooId: Int

  """Checks for equality with the object’s \`label\` field."""
  label: String

  """Checks for equality with the object’s \`createdAt\` field."""
  createdAt: Datetime

  """Checks for equality with the object’s \`updatedAt\` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting \`Bar\`"""
input BarInput {
  id: Int
  fooId: Int!
  label: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a \`Bar\`. Fields that are set will be updated."""
input BarPatch {
  id: Int
  fooId: Int
  label: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of \`Bar\` values."""
type BarsConnection {
  """A list of \`Bar\` objects."""
  nodes: [Bar]!

  """
  A list of edges which contains the \`Bar\` and cursor to aid in pagination.
  """
  edges: [BarsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Bar\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Bar\` edge in the connection."""
type BarsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Bar\` at the end of the edge."""
  node: Bar
}

"""Methods to use when ordering \`Bar\`."""
enum BarsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FOO_ID_ASC
  FOO_ID_DESC
  LABEL_ASC
  LABEL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create \`Bar\` mutation."""
input CreateBarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Bar\` to be created by this mutation."""
  bar: BarInput!
}

"""The output of our create \`Bar\` mutation."""
type CreateBarPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Bar\` that was created by this mutation."""
  bar: Bar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single \`Foo\` that is related to this \`Bar\`."""
  fooByFooId: Foo

  """An edge for our \`Bar\`. May be used by Relay 1."""
  barEdge(
    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BarsEdge
}

"""All input for the create \`Foo\` mutation."""
input CreateFooInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The \`Foo\` to be created by this mutation."""
  foo: FooInput!
}

"""The output of our create \`Foo\` mutation."""
type CreateFooPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Foo\` that was created by this mutation."""
  foo: Foo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our \`Foo\`. May be used by Relay 1."""
  fooEdge(
    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the \`deleteBarById\` mutation."""
input DeleteBarByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteBar\` mutation."""
input DeleteBarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Bar\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Bar\` mutation."""
type DeleteBarPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Bar\` that was deleted by this mutation."""
  bar: Bar
  deletedBarId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single \`Foo\` that is related to this \`Bar\`."""
  fooByFooId: Foo

  """An edge for our \`Bar\`. May be used by Relay 1."""
  barEdge(
    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BarsEdge
}

"""All input for the \`deleteFooById\` mutation."""
input DeleteFooByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the \`deleteFoo\` mutation."""
input DeleteFooInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Foo\` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete \`Foo\` mutation."""
type DeleteFooPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Foo\` that was deleted by this mutation."""
  foo: Foo
  deletedFooId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our \`Foo\`. May be used by Relay 1."""
  fooEdge(
    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosEdge
}

type Foo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of \`Bar\`."""
  barsByFooId(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BarCondition
  ): BarsConnection!
}

"""
A condition to be used against \`Foo\` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FooCondition {
  """Checks for equality with the object’s \`id\` field."""
  id: Int

  """Checks for equality with the object’s \`name\` field."""
  name: String

  """Checks for equality with the object’s \`createdAt\` field."""
  createdAt: Datetime

  """Checks for equality with the object’s \`updatedAt\` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting \`Foo\`"""
input FooInput {
  id: Int
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a \`Foo\`. Fields that are set will be updated."""
input FooPatch {
  id: Int
  name: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of \`Foo\` values."""
type FoosConnection {
  """A list of \`Foo\` objects."""
  nodes: [Foo]!

  """
  A list of edges which contains the \`Foo\` and cursor to aid in pagination.
  """
  edges: [FoosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* \`Foo\` you could get from the connection."""
  totalCount: Int!
}

"""A \`Foo\` edge in the connection."""
type FoosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The \`Foo\` at the end of the edge."""
  node: Foo
}

"""Methods to use when ordering \`Foo\`."""
enum FoosOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single \`Bar\`."""
  createBar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBarInput!
  ): CreateBarPayload

  """Creates a single \`Foo\`."""
  createFoo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFooInput!
  ): CreateFooPayload

  """Updates a single \`Bar\` using its globally unique id and a patch."""
  updateBar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBarInput!
  ): UpdateBarPayload

  """Updates a single \`Bar\` using a unique key and a patch."""
  updateBarById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBarByIdInput!
  ): UpdateBarPayload

  """Updates a single \`Foo\` using its globally unique id and a patch."""
  updateFoo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFooInput!
  ): UpdateFooPayload

  """Updates a single \`Foo\` using a unique key and a patch."""
  updateFooById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFooByIdInput!
  ): UpdateFooPayload

  """Deletes a single \`Bar\` using its globally unique id."""
  deleteBar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBarInput!
  ): DeleteBarPayload

  """Deletes a single \`Bar\` using a unique key."""
  deleteBarById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBarByIdInput!
  ): DeleteBarPayload

  """Deletes a single \`Foo\` using its globally unique id."""
  deleteFoo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFooInput!
  ): DeleteFooPayload

  """Deletes a single \`Foo\` using a unique key."""
  deleteFooById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFooByIdInput!
  ): DeleteFooPayload
}

"""An object with a globally unique \`ID\`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique \`ID\`."""
  node(
    """The globally unique \`ID\`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of \`Bar\`."""
  allBars(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BarCondition
  ): BarsConnection

  """Reads and enables pagination through a set of \`Foo\`."""
  allFoos(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FooCondition
  ): FoosConnection
  barById(id: Int!): Bar
  fooById(id: Int!): Foo
  fooOne: Foo

  """Reads and enables pagination through a set of \`Foo\`."""
  oddFoos(
    """Only read the first \`n\` values of the set."""
    first: Int

    """Only read the last \`n\` values of the set."""
    last: Int

    """
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): FoosConnection!
  oddFoosArray: [Foo]
  viewerId: Int

  """Reads a single \`Bar\` using its globally unique \`ID\`."""
  bar(
    """The globally unique \`ID\` to be used in selecting a single \`Bar\`."""
    nodeId: ID!
  ): Bar

  """Reads a single \`Foo\` using its globally unique \`ID\`."""
  foo(
    """The globally unique \`ID\` to be used in selecting a single \`Foo\`."""
    nodeId: ID!
  ): Foo
}

"""
The root subscription type: contains realtime events you can subscribe to with the \`subscription\` operation.
"""
type Subscription {
  listen(topic: String!): ListenPayload!
}

"""All input for the \`updateBarById\` mutation."""
input UpdateBarByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the \`Bar\` being updated.
  """
  barPatch: BarPatch!
  id: Int!
}

"""All input for the \`updateBar\` mutation."""
input UpdateBarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Bar\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Bar\` being updated.
  """
  barPatch: BarPatch!
}

"""The output of our update \`Bar\` mutation."""
type UpdateBarPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Bar\` that was updated by this mutation."""
  bar: Bar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single \`Foo\` that is related to this \`Bar\`."""
  fooByFooId: Foo

  """An edge for our \`Bar\`. May be used by Relay 1."""
  barEdge(
    """The method to use when ordering \`Bar\`."""
    orderBy: [BarsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BarsEdge
}

"""All input for the \`updateFooById\` mutation."""
input UpdateFooByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the \`Foo\` being updated.
  """
  fooPatch: FooPatch!
  id: Int!
}

"""All input for the \`updateFoo\` mutation."""
input UpdateFooInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique \`ID\` which will identify a single \`Foo\` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the \`Foo\` being updated.
  """
  fooPatch: FooPatch!
}

"""The output of our update \`Foo\` mutation."""
type UpdateFooPayload {
  """
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The \`Foo\` that was updated by this mutation."""
  foo: Foo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our \`Foo\`. May be used by Relay 1."""
  fooEdge(
    """The method to use when ordering \`Foo\`."""
    orderBy: [FoosOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoosEdge
}

`;
